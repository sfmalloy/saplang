Program ::= { Decl }

Decl ::= RegularDecl | TrunkDecl

RegularDecl ::= ( "let" | "const" ) ( VarDecl ( ";" | "=" Expr ) | FuncDecl ( ";" | "=" CompoundStmt ) )

VarDecl ::= Identifier TypeSpec

FuncDecl ::= VarDecl "(" [ VarDecl { "," VarDecl } ] ")"

CompoundStmt ::= "{" { Decl | Stmt } "}"

Stmt ::= ForStmt | WhileStmt | ConditionalStmt | CallStmt | ReturnStmt | ExprStmt

ForStmt ::= "for" "(" [ ExprStmt ] ";" [ ExprStmt ] ";" [ ExprStmt ] ")" CompoundStmt

WhileStmt ::= "while" "(" [ ExprStmt ] ")" CompoundStmt

ConditionalStmt ::= "if" "(" ExprStmt ")" [ "else" ( ConditionalStmt | CompoundStmt ) ]

CallStmt ::= Identifier "(" [ Expr { "," Expr } ] ")" ";"

ReturnStmt ::= "return" [ Expr ] ";"

ExprStmt = ReassignStmt | Expr

(* Don't forget about array subscript *)

ReassignStmt ::= Identifier "=" Expr

TrunkDecl ::= "trunk" Identifier "=" "{" { ( VarDecl ";" ) } "}"

TypeSpec ::= "<" Type [ TypeSpec ] ">"

Expr ::= AddTerm { AddOp AddTerm }

AddTerm ::= MulTerm { MulOp MulTerm }

MulTerm ::= "(" Expr ")" | Identifier

AddSubExpr ::= Expr ( "+" | "-" ) Expr

Identifier ::= Letter { Letter | Digit }

Digit ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

Letter ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" 
         | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" 
         | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" 
         | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" 
         | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" 
         | "Y" | "Z"

Type ::= "i8" | "i16" | "i32" | "i64" |
         "u8" | "u16" | "u32" | "u64" |
         "f32"| "f64" |
         "func" | "char" | "str" | "array" | "set" | "dict" | "void"
